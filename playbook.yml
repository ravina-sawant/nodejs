---
- name: Clone repo, build, push, and run Docker container on remote EC2 instance
  hosts: docker_host
  become: true
  vars:
    github_repo: "https://github.com/ravina-sawant/nodejs.git"  
    clone_path: "/home/ubuntu/nodejs"
    image_name: ravina96/nodejsapp
    image_tag: latest  # Fixed typo
    container_name: nodejsappli
    dockerhub_username: "ravina1996"
    dockerhub_password: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          63656264363738616433363333303530353266633266646563666661363136373031333038323535
          3661636333666636353366366635633962343135373566660a613739366239343731326333663034
          66376639356537323136396364313562383033356465393235333738633264323933393831663435
          3033633363663263660a333036333533336265363564383136303535343139633961653761393734
          6332

  tasks:

    - name: Install Git (if not installed)
      package:
        name: git
        state: present

    - name: Clone GitHub repository
      git:
        repo: "{{ github_repo }}"
        dest: "{{ clone_path }}"
        version: main
        force: yes  

    - name: Log in to Docker Hub
      docker_login:
        username: "{{ dockerhub_username }}"
        password: "{{ dockerhub_password }}"
      register: login_result

    - name: Fail if Docker login unsuccessful
      fail:
        msg: "Docker login failed. Check credentials."
      when: login_result.failed is defined and login_result.failed

    - name: Build Docker image from cloned repository
      docker_image:
        source: build
        build:
          path: "{{ clone_path }}"
        name: "{{ image_name }}"
        tag: "{{ image_tag }}"
        push: no
      register: build_result

    - name: Push Docker image to Docker Hub
      command: docker push {{ image_name }}:{{ image_tag }}
      when: build_result.changed

    - name: Stop and remove existing container (if any)
      docker_container:
        name: "{{ container_name }}"
        state: absent
      ignore_errors: yes

    - name: Run the container from the new image
      docker_container:
        name: "{{ container_name }}"
        image: "{{ image_name }}:{{ image_tag }}"
        state: started
        restart_policy: always
        ports:
          - "3000:3000"
